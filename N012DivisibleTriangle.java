//The sequence of triangle numbers is generated by adding the natural numbers.
//So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
//The first ten terms would be:
//1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
//Let us list the factors of the first seven triangle numbers:
// 1: 1
// 3: 1,3
// 6: 1,2,3,6
// 10: 1,2,5,10
// 15: 1,3,5,15
// 21: 1,3,7,21
// 28: 1,2,4,7,14,28
// We can see that 28 is the first triangle number to have over five divisors.
//What is the value of the first triangle number to have over five hundred divisors?

public class N012DivisibleTriangle {

	public static int nthTriangle(int n) {
		return (n * (n + 1)) / 2;
	}

	public static int[] sieve(int n) {
		
		boolean[] sieve = new boolean[n + 1];
		sieve[0] = true;
		sieve[1] = true;
		for (int i = 4; i < sieve.length; i = i + 2) {
			sieve[i] = true;
		}
		for (int i = 3; i <= (int)Math.sqrt(n); i = i + 2) {
			if (!sieve[i]) {
				for (int j = i * i; j < sieve.length; j = j + (2*i)) {
					sieve[j] = true;
				}
			}
		}

		int primeCnt = 0;
		for (int i = 0; i < sieve.length; i++) {
			if (!sieve[i]) primeCnt++;
		}

		int[] primeList = new int[primeCnt];
		int j = 0;
		for (int i = 0; i < sieve.length; i++) {
			if (!sieve[i]) {
				primeList[j] = i;
				j++;
			}
		}

		return primeList;
	}

	public static int CountDivisors(int n, int[] primes) {
		
		int divisors = 1;
		int i = 0;
		while (n > 1) {
			int exponent = 1;
			while (n % primes[i] == 0) {
				exponent++;
				n = n/primes[i];
			}
			divisors = divisors*exponent;
			i++;
		}
		return divisors;
	}

	public static void fiveHdiv() {
		int[] primes = sieve(1000000);
		
		for (int n = 1; 1==1; n++) {
			if (CountDivisors(nthTriangle(n), primes) > 500) {
				System.out.println(nthTriangle(n));
				break;
			}
		}
	}

	public static void main(String[] args) {
		fiveHdiv();
	}

}
